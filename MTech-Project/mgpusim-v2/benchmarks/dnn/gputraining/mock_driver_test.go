// Code generated by MockGen. DO NOT EDIT.
// Source: driver.go

// Package gputraining_test is a generated GoMock package.
package gputraining_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	driver "gitlab.com/akita/mgpusim/v2/driver"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// AllocateMemory mocks base method.
func (m *MockDriver) AllocateMemory(ctx *driver.Context, size uint64) driver.Ptr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateMemory", ctx, size)
	ret0, _ := ret[0].(driver.Ptr)
	return ret0
}

// AllocateMemory indicates an expected call of AllocateMemory.
func (mr *MockDriverMockRecorder) AllocateMemory(ctx, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateMemory", reflect.TypeOf((*MockDriver)(nil).AllocateMemory), ctx, size)
}

// FreeMemory mocks base method.
func (m *MockDriver) FreeMemory(ctx *driver.Context, ptr driver.Ptr) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FreeMemory", ctx, ptr)
}

// FreeMemory indicates an expected call of FreeMemory.
func (mr *MockDriverMockRecorder) FreeMemory(ctx, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeMemory", reflect.TypeOf((*MockDriver)(nil).FreeMemory), ctx, ptr)
}
